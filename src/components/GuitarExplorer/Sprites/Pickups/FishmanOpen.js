function FishmanOpen({ position = 'neck' }) {
  const matrix = { x: 180, y: position === 'neck' ? 10 : 186 };
  return (
    <g transform={`matrix(1, 0, 0, 1, ${matrix.x}, ${matrix.y})`}>
      {/* <title>fishman-fluence-classic</title> */}
      {/* <title>fishmanopen</title> */}
      <path d="M 244 1214 L 244 1176 C 244 1164 254 1158 262 1158 L 376 1158 C 384 1158 394 1164 394 1176 L 394 1214 C 394 1226 384 1232 376 1232 L 262 1232 C 254 1232 244 1226 244 1214 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(14, 12, 17)' }} />
      <path d="M 244 1176 C 244 1164 254 1158 262 1158 L 376 1158 C 384 1158 394 1164 394 1176 C 394 1188 384 1194 376 1194 L 262 1194 C 254 1194 244 1188 244 1176 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(105, 103, 106)' }} />
      <path d="M 244 1214 C 244 1202 254 1196 262 1196 L 376 1196 C 384 1196 394 1202 394 1214 C 394 1226 384 1232 376 1232 L 262 1232 C 254 1232 244 1226 244 1214 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(105, 103, 106)' }} />
      <g>
        <path d="M 380 1177 C 380 1179.761 377.761 1182 375 1182 C 372.239 1182 370 1179.761 370 1177 C 370 1174.239 372.239 1172 375 1172 C 377.761 1172 380 1174.239 380 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 237, 227)' }} />
        <path d="M 358 1177 C 358 1179.761 355.761 1182 353 1182 C 350.239 1182 348 1179.761 348 1177 C 348 1174.239 350.239 1172 353 1172 C 355.761 1172 358 1174.239 358 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 237, 227)' }} />
        <path d="M 336 1177 C 336 1179.761 333.761 1182 331 1182 C 328.239 1182 326 1179.761 326 1177 C 326 1174.239 328.239 1172 331 1172 C 333.761 1172 336 1174.239 336 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 237, 227)' }} />
        <path d="M 312 1177 C 312 1179.761 309.761 1182 307 1182 C 304.239 1182 302 1179.761 302 1177 C 302 1174.239 304.239 1172 307 1172 C 309.761 1172 312 1174.239 312 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 237, 227)' }} />
        <path d="M 290 1177 C 290 1179.761 287.761 1182 285 1182 C 282.239 1182 280 1179.761 280 1177 C 280 1174.239 282.239 1172 285 1172 C 287.761 1172 290 1174.239 290 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 237, 227)' }} />
        <path d="M 268 1177 C 268 1179.761 265.761 1182 263 1182 C 260.239 1182 258 1179.761 258 1177 C 258 1174.239 260.239 1172 263 1172 C 265.761 1172 268 1174.239 268 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 237, 227)' }} />
      </g>
      <g transform="matrix(1, 0, 0, 1, 0, 36)">
        <path d="M 380 1177 C 380 1179.761 377.761 1182 375 1182 C 372.239 1182 370 1179.761 370 1177 C 370 1174.239 372.239 1172 375 1172 C 377.761 1172 380 1174.239 380 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} />
        <path d="M 358 1177 C 358 1179.761 355.761 1182 353 1182 C 350.239 1182 348 1179.761 348 1177 C 348 1174.239 350.239 1172 353 1172 C 355.761 1172 358 1174.239 358 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} />
        <path d="M 336 1177 C 336 1179.761 333.761 1182 331 1182 C 328.239 1182 326 1179.761 326 1177 C 326 1174.239 328.239 1172 331 1172 C 333.761 1172 336 1174.239 336 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} />
        <path d="M 312 1177 C 312 1179.761 309.761 1182 307 1182 C 304.239 1182 302 1179.761 302 1177 C 302 1174.239 304.239 1172 307 1172 C 309.761 1172 312 1174.239 312 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} />
        <path d="M 290 1177 C 290 1179.761 287.761 1182 285 1182 C 282.239 1182 280 1179.761 280 1177 C 280 1174.239 282.239 1172 285 1172 C 287.761 1172 290 1174.239 290 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} />
        <path d="M 268 1177 C 268 1179.761 265.761 1182 263 1182 C 260.239 1182 258 1179.761 258 1177 C 258 1174.239 260.239 1172 263 1172 C 265.761 1172 268 1174.239 268 1177 Z" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} />
        <path d="M 372.075 1179.703 L 378 1174" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} />
        <path d="M 373.091 1178.769 L 379.016 1173.066" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} transform="matrix(1, 0, 0, 1, -23.01642, 0.934473)" />
        <path d="M 373.27 1180.257 L 379.195 1174.554" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} transform="matrix(1, 0, 0, 1, -45.194625, -0.553724)" />
        <path d="M 370.818 1177.35 L 376.743 1171.647" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} transform="matrix(1, 0, 0, 1, -66.743175, 2.353126)" />
        <path d="M 371.757 1179.131 L 377.682 1173.428" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} transform="matrix(1, 0, 0, 1, -89.681994, 0.571589)" />
        <path d="M 371.115 1178.969 L 377.04 1173.266" style={{ stroke: 'url(#std-stroke)', fill: 'rgb(246, 241, 234)' }} transform="matrix(1, 0, 0, 1, -111.039509, 0.733863)" />
      </g>
      <path d="M 390 1202 L 358 1202 C 348 1202 336 1228 328 1228 L 250 1228" style={{ fill: 'none', stroke: 'rgb(67, 61, 63)' }} />
      <path
        d="M 347.743 1228.525 L 345.895 1228.525 L 347.715 1224.044 L 351.393 1224.044 L 351.037 1224.914 L 349.207 1224.914 L 348.923 1225.627 L 350.647 1225.627 L 350.291 1226.489 L 348.568 1226.489 L 347.743 1228.525 Z M 351.127 1228.525 L 349.349 1228.525 L 351.187 1224.044 L 352.947 1224.044 L 351.127 1228.525 Z M 353.302 1228.569 C 352.474 1228.569 351.913 1228.467 351.618 1228.264 C 351.338 1228.062 351.288 1227.736 351.466 1227.29 L 351.652 1226.846 L 353.447 1226.846 L 353.219 1227.411 C 353.125 1227.632 353.226 1227.742 353.52 1227.742 C 353.687 1227.742 353.809 1227.719 353.886 1227.673 C 353.978 1227.626 354.041 1227.548 354.075 1227.438 C 354.143 1227.287 354.161 1227.165 354.128 1227.072 C 354.094 1226.974 354.033 1226.892 353.942 1226.828 C 353.865 1226.765 353.712 1226.666 353.486 1226.533 L 352.842 1226.141 C 352.351 1225.851 352.182 1225.529 352.335 1225.175 C 352.486 1224.792 352.782 1224.499 353.223 1224.296 C 353.665 1224.099 354.232 1224 354.917 1224 C 355.747 1224 356.296 1224.107 356.568 1224.322 C 356.851 1224.537 356.897 1224.87 356.705 1225.323 L 354.838 1225.323 L 354.949 1225.018 C 354.979 1224.96 354.964 1224.914 354.9 1224.879 C 354.849 1224.844 354.765 1224.827 354.646 1224.827 C 354.503 1224.827 354.388 1224.844 354.296 1224.879 C 354.218 1224.92 354.162 1224.972 354.134 1225.036 C 354.077 1225.181 354.189 1225.332 354.464 1225.488 L 355.315 1225.993 C 355.518 1226.109 355.683 1226.222 355.813 1226.332 C 355.929 1226.437 356.008 1226.561 356.045 1226.707 C 356.085 1226.852 356.066 1227.022 355.991 1227.22 C 355.813 1227.661 355.508 1227.995 355.079 1228.221 C 354.653 1228.453 354.061 1228.569 353.302 1228.569 Z M 357.166 1228.525 L 355.353 1228.525 L 357.171 1224.044 L 359.003 1224.044 L 358.348 1225.645 L 359.219 1225.645 L 359.873 1224.044 L 361.686 1224.044 L 359.867 1228.525 L 358.037 1228.525 L 358.86 1226.489 L 358.007 1226.489 L 357.166 1228.525 Z M 361.616 1228.525 L 359.964 1228.525 L 361.782 1224.044 L 364.591 1224.044 L 364.229 1226.776 L 366.119 1224.044 L 368.928 1224.044 L 367.109 1228.525 L 365.438 1228.525 L 366.745 1225.297 L 364.371 1228.525 L 362.735 1228.525 L 362.923 1225.297 L 361.616 1228.525 Z M 368.735 1228.525 L 366.958 1228.525 L 369.665 1224.044 L 372.776 1224.044 L 371.827 1228.525 L 370.086 1228.525 L 370.243 1227.803 L 369.142 1227.803 L 368.735 1228.525 Z M 370.844 1224.801 L 369.566 1227.081 L 370.401 1227.081 L 370.934 1224.801 L 370.844 1224.801 Z M 373.461 1228.525 L 371.666 1228.525 L 373.486 1224.044 L 375.387 1224.044 L 375.338 1226.184 L 376.223 1224.044 L 378 1224.044 L 376.162 1228.525 L 374.367 1228.525 L 374.37 1226.28 L 373.461 1228.525 Z"
        style={{ whiteSpace: 'pre', fill: 'rgb(51, 49, 52)' }}
      />
    </g>
  );
}

export default FishmanOpen;
